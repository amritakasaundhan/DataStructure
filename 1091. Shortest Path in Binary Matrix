class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
       if(grid.length == 0 || grid[0].length == 0){
        return -1;
        }
        if(grid[0][0] == 1){
            return -1;
        }
        int [][] directions = new int [][] {{0, -1}, {0, 1}, {1, 0}, {-1, 0}, {1, -1}, {1, 1}, {-1, 1}, {-1, -1}};
        boolean [][] visited = new boolean [grid.length][grid[0].length];
        Queue<int []> queue = new LinkedList<>();
        queue.add(new int []{0, 0});
        visited[0][0] = true;
        int result = 1;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                int [] curr = queue.poll();
                if(curr[0] == grid.length-1 && curr[1] == grid[0].length-1){
                    return result;
                }
                for(int [] direction : directions){
                    int x = curr[0] + direction[0];
                    int y = curr[1] + direction[1];
                    if(x >= 0 && y >= 0 && x < grid.length && y < grid[0].length && grid[x][y] == 0 && visited[x][y] == false){
                        queue.add(new int []{x, y});
                        visited[x][y] = true;
                    }
                }
            }
            result++;
        }
        return -1;
    } 
}

