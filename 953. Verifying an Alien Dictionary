Approach: Create a HashMap, and store the order of character corresponding to the index. Now compare the adjacent words, any time counters first word the charatcers 
which has higher index than that of second word return false. If all the charatcers are matched however the second word has lower length then return false. 
Anytime encounter a characater not present in map return false.
else return true

class Solution {
    public boolean isAlienSorted(String[] words, String order) {
        if(words.length == 0 || order.length() == 0){
            return true;
        }
        Map<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < order.length(); i++){
            map.put(order.charAt(i), i);
        }
        for(int i = 0 ; i < words.length; i++){
            for(int j = i+1 ; j < words.length ;j++){
                String word1 = words[i];
                String word2 = words[j];
                int l1 = 0;
                int l2 = 0;
                while(l1 < word1.length() && l2 < word2.length()){
                    if(map.getOrDefault(word1.charAt(l1) ,-1) >  map.getOrDefault(word2.charAt(l2) ,-1)){
                        return false;
                    }
                    if(map.getOrDefault(word1.charAt(l1) ,-1) == -1 || map.getOrDefault(word2.charAt(l2) ,-1) == -1){
                        return false;
                    }
                    if(map.getOrDefault(word1.charAt(l1) ,-1) < map.getOrDefault(word2.charAt(l2) ,-1)){
                        break;
                    }
                    l1++;
                    l2++;
                    
                }
                if(l2 >= word2.length() && l1 < word1.length()){
                    return false;
                }
            }
        }
        return true;
    }
}
