class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        for(int i = 0 ; i < nums.length && nums[i]<= 0; i++){
            if(i == 0 || nums[i-1] != nums[i]){//If the current value is the same as the one before, skip it and check i== 0 to avoid out of bound error
             twosum(nums, i, result);   
            }
        }
        return result;
    }
    public void twosum(int[] nums, int index, List<List<Integer>>result){
        int left = index+1;
        int right = nums.length-1;
        while(left < right){
           int sum = nums[left]+nums[right]+ nums[index];
            if(sum < 0 || (left > index+1 && nums[left] == nums[left-1])){//increment left if the value is the same as for left - 1
                left++;
            }else if(sum > 0 ||(right < nums.length-1 && nums[right] == nums[right+1])){//decrement right if the value is the same as for right + 1
                right--;
            }else{
                List<Integer>list = new ArrayList<>();
                list.add(nums[index]);
                list.add(nums[left]);
                list.add(nums[right]);
                left++;
                right--;
                result.add(list);
            }
        }
    }
}
