Approach: Using binary search, find mid by adding start and end pointer and divide by 2.
if this element is equals to traget return element. 
if left element is less than mid element and target lies start and mid then modify end with mid-1 else modify start by mid+1
also check if mid element is greater than element at end , 
if element lies in between mid and end then modify start with mid+1 else modify end with mid-1
at the end return -1

public class Solution {
    public int search(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        while (start <= end){
            int mid = (start + end) / 2;
            if (nums[mid] == target)
                return mid;
        
            if (nums[start] <= nums[mid]){
                 if (target < nums[mid] && target >= nums[start]) 
                    end = mid - 1;
                 else
                    start = mid + 1;
            } 
        
            if (nums[mid] <= nums[end]){
                if (target > nums[mid] && target <= nums[end])
                    start = mid + 1;
                 else
                    end = mid - 1;
            }
        }
        return -1;
    }
}

class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 0 || nums == null){
            return -1;
        }
        int start = 0;
        int end = nums.length-1;
        while(start <= end){
            if(nums[start] == target){
                return start;
            }
            if(nums[end] == target){
                return end;
            }
            start++;
            end--;
        }
        return -1;
    }
}
