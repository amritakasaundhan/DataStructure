Approach:1 Keep on merging elements in as traveverse in list of nodes. have one curr pointer node initializing first nodes head of list. keep on updating the curr.next with
updated merged list and pass this list further for merging
Time Complexity O(NK)
[1, 2, 3],[1, 2, 4], [2, 4]
merge first two->[1, 1, 2, 2, 3, 4]
public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0){
            return null;
        }
        if(lists.length < 2){
            return lists[0];
        }
        ListNode head = new ListNode(0);
        ListNode curr = head;
        curr.next = lists[0];
        for(int i = 1; i < lists.length ; i++){
            ListNode temp = mergeTwoList(curr.next, lists[i]);
            curr.next = temp;
        }
        
        return curr.next;
    }
Approach:2 Using priority queue. Keep iterating in lists element and store it in queue. 
At last create linkedlist by interating priority queue
Time complexity : O(Nlogk) where k is the number of linked list and n is number of nodes
Space COmplexity == O(N)

Approach:3

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0){
            return null;
        }
        if(lists.length < 2){
            return lists[0];
        }
        int start = 0;
        int end = lists.length-1;
        while(start < end){
           while(start < end){
            lists[start] = mergeTwoList(lists[start], lists[end]);
            start++;
            end--;
            } 
            if(start > end){
                end = start-1;
            }else{
                end = start;
            }
            start = 0;
        }
        return lists[0];
    }
    public ListNode mergeTwoList(ListNode l1, ListNode l2){
        if(l1 == null){
            return l2;
        }
        if(l2 == null){
            return l1;
        }
        ListNode head = new ListNode(0);
        ListNode curr = head;
        ListNode head1 = l1;
        ListNode head2 = l2;
        if(head1.val < head2.val){
            curr.next = head1;
            curr = curr.next;
            head1 = head1.next;
        }else{
            curr.next = head2;
            curr = curr.next;
            head2 = head2.next; 
        }
        while(head1 != null && head2 != null){
            if(head1.val < head2.val){
                curr.next = head1;
                head1 = head1.next;
                curr = curr.next;
            }else{
                curr.next = head2;
                head2 = head2.next;
                curr = curr.next;
            }
        }
        while(head1 != null){
            curr.next = head1;
            curr = curr.next;
            head1 = head1.next;
        }
        while(head2 != null){
            curr.next = head2;
            curr = curr.next;
            head2 = head2.next;
        }
        return head.next;
        
    }
}
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0){
            return null;
        }
        if(lists.length < 2){
            return lists[0];
        }

        int length = lists.length-1;
        while (length != 0){
            
        int i = 0; 
        int j = length;
        while(i < j){
            lists[i] = mergeTwoList(lists[i], lists[j]);
            i = i+1;
            j = j-1;
            if(i >= j){
                length = j;
                break;
            }
            
        }
        }
        return lists[0];
    }
    public ListNode mergeTwoList(ListNode l1, ListNode l2){
        if(l1 == null && l2 == null){
            return null;
        }
        if(l1 == null){
            return l2;
        }
        if(l2 == null){
            return l1;
        }
        ListNode curr = null;
        if(l1.val <= l2.val){
            curr = l1;
            l1 = l1.next;
        }else{
           curr = l2;
            l2 = l2.next; 
        }
        ListNode head = curr;
        while(l1 != null && l2 != null){
            if(l1.val <= l2.val){
                curr.next = l1;
                l1 = l1.next;
            }else{
                curr.next = l2;
                l2 = l2.next;
            }
            curr = curr.next;
        }
        if(l1 != null){
            curr.next = l1;
        }
        if(l2 != null){
            curr.next = l2;
        }
        return head;
    }
}








Approach:2Iterate in list array and keep on merging first and last element and increment first and decrement last
until the length of list becomes 1
So basically there would be two loop, one will run until length ==1 and in inner loop keep on mering the lists.
Time complexity : O(Nlogk) where k is the number of linked list and n is number of nodes
Space COmplexity == 0(1)




Approach1 COde:
public class Solution {
    public ListNode mergeKLists(List<ListNode> lists) {
        if (lists==null||lists.size()==0) return null;
        
        PriorityQueue<ListNode> queue= new PriorityQueue<ListNode>(lists.size(),new Comparator<ListNode>(){
            @Override
            public int compare(ListNode o1,ListNode o2){
                if (o1.val<o2.val)
                    return -1;
                else if (o1.val==o2.val)
                    return 0;
                else 
                    return 1;
            }
        });
        
        ListNode dummy = new ListNode(0);
        ListNode tail=dummy;
        
        for (ListNode node:lists)
            if (node!=null)
                queue.add(node);
            
        while (!queue.isEmpty()){
            tail.next=queue.poll();
            tail=tail.next;
            
            if (tail.next!=null)
                queue.add(tail.next);
        }
        return dummy.next;
    }
}
