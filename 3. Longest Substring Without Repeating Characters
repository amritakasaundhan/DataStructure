class Solution {
    public int lengthOfLongestSubstring(String s) {
        int [] arr = new int [128];
        //Map<Character, Integer> map = new HashMap<>();
        int maxLength = 0;
        int j = 0 ;
        for(int i = 0 ; i < s.length(); i++){
            j = Math.max(j , arr[s.charAt(i)]);
            /*if(map.containsKey(s.charAt(i))){
            j = Math.max(j, map.get(s.charAt(i)));
            }
            */
            maxLength = Math.max(maxLength, i-j+1);
            arr[s.charAt(i)] = i+1;
 
        }
        return maxLength;
    }
}

    // public int lengthOfLongestSubstring(String s) {
    //     Set<Character> set = new HashSet<>();
    //     int i = 0; 
    //     int j = 0;
    //     int maxLength = Integer.MIN_VALUE;
    //     while(i < s.length() && j < s.length()){
    //         if(!set.contains(s.charAt(j))){
    //             set.add(s.charAt(j));
    //             j++;
    //             maxLength =  Math.max(maxLength, j-i);
    //         }else{
    //             set.remove(s.charAt(i));
    //             i++;
    //         }
    //     }
    //     if(maxLength == Integer.MIN_VALUE){
    //         return 0;
    //     }else{
    //         return maxLength;
    //     }
    // }
