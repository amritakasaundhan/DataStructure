Approach: traverse in array until right reaches to out matrix[0].length
keeping the same right index, start traversing down until it reaches to length of matrix. then go to left until it reaches to 0 and go up until it reaches to 0
I will also use the boolean array to track down the indices visited so far. 

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        if(matrix.length == 0 || matrix[0].length == 0){
            return new ArrayList<>();
        }
        List<Integer> result = new ArrayList<>();
        boolean[][] visited = new boolean[matrix.length][matrix[0].length];
        dfs(matrix, result, visited, 0, 0);
        return result;
    }
    public void dfs(int[][] matrix, List<Integer>result, boolean[][] visited, int i , int j ){
        if( i < 0 || j < 0 || i >= matrix.length || j >= matrix[0].length || visited[i][j]){
            return;
        }
        result.add(matrix[i][j]);
        visited[i][j] = true;
        int right = j+1;
        while(right < matrix[0].length && visited[i][right] != true){
            result.add(matrix[i][right]);
            visited[i][right] = true;
            right++;
        }
        right = right-1;
        int down = i+1;
        while(down < matrix.length && visited[down][right] != true){
            result.add(matrix[down][right]);
            visited[down][right] = true;
            down++;
        }
        down = down-1;
        int left = right-1;
        while (left >= 0 && visited[down][left] != true){
            result.add(matrix[down][left]);
            visited[down][left] = true;
            left--;
        }
        left = left+1;
        int up = down-1;
        while(up >= 0 && visited[up][left] != true){
            result.add(matrix[up][left]);
            visited[up][left] = true;
            up--;
        }
        up = up+1;
        dfs(matrix, result, visited, up, left+1);
        
    }
}
