collect all the left boundary, leaves and right boundary
class Solution {
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
        if(root == null){
            return new ArrayList<>();
        }
        List<Integer>result = new ArrayList<>();
        result.add(root.val);
        if(root.left != null){
            leftboundary(root.left, result);
        }
        getleaves(root.left, result);
        getleaves(root.right, result);
        if(root.right != null){
            rightboundary(root.right, result);
        }
        return result;
    }
    public void leftboundary(TreeNode root, List<Integer>result){
        if(root == null ||(root.left == null && root.right == null)){
            return;
        }
        result.add(root.val);
        if(root.left != null){
            leftboundary(root.left, result);
        }else{
           leftboundary(root.right, result); 
        }
    }
    public void getleaves(TreeNode root, List<Integer>result){
        if(root == null){
            return ;
        }
        if(root.left == null && root.right == null ){
            result.add(root.val);
            return;
        }
       getleaves(root.left, result); 
       getleaves(root.right, result); 
        
        
    }
    public void rightboundary(TreeNode root,List<Integer>result){
        if(root == null ||(root.left == null && root.right== null)){
            return;
        }
        
        if(root.right!= null){
            rightboundary(root.right, result);
        }else{
            rightboundary(root.left, result);
        }
        result.add(root.val);
        
    }
}

Approach2:
class Solution {
    public void addleaves(List<Integer> list, TreeNode root) {
          if(root == null){
              return ; 
          }
        if(isnode(root)){
            list.add(root.val);
        }
        addleaves(list, root.left);
        addleaves(list, root.right);
    }
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
      if(root == null){
          return new ArrayList<>();
      }
        List<Integer> list = new ArrayList<>();
        if(!isnode(root)){
          list.add(root.val);  
        }
        
        TreeNode t = root.left;
        while(t != null){
            if(!isnode(t)){
                list.add(t.val);
            }
            if(t.left != null){
                t = t.left;
            }else{
                t = t.right;
            }
        }
        addleaves(list, root);
        Stack<Integer> stack = new Stack<>();
        t = root.right;
        while(t != null){
            if(!isnode(t)){
                stack.push(t.val);
            }
            if (t.right != null) {
                t = t.right;
            } else {
                t = t.left;
            }
        }
        while(!stack.empty()){
            list.add(stack.pop());
        }
        return list;
        
    }
    public boolean isnode(TreeNode root) {
          if(root.left == null && root.right == null){
              return true;
          }
        return false;
    }
}
