Create a class having details value, min index of that value, max index of the value and the count.
Now create map having key as the value and value would of details type. and a set keep a track if element is repeated in array. 
This will idetify that maxindex has to incremented by current index
and count has to increment by one. and update it in map.
have one variable which will track the maxcount occured so far.
in next iteration within map, check if any key value has count euqals to maxcount. Get minmium of difference of max and min index.
Time Complexity O(n)


class Solution {
    class Details{
        int value;
        int minIndex;
        int maxIndex;
        int count;
        public Details(int value, int minIndex, int maxIndex, int count){
            this.value = value;
            this.minIndex = minIndex;
            this.maxIndex = maxIndex;
            this.count = count;
        }
    }
    public int findShortestSubArray(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        Set<Integer> set = new HashSet<>();
        int maxCount = 1;
        // int maxKey = -1;
        Map<Integer, Details> detailvalues = new HashMap<>();
        for(int i = 0 ; i < nums.length; i++){
            if(set.contains(nums[i])){
               Details curr = detailvalues.get(nums[i]);
                curr.count = curr.count+1;
                curr.maxIndex = i;
                detailvalues.put(nums[i],curr);
                maxCount = Math.max(maxCount, curr.count);
            }else{
                set.add(nums[i]);
                Details temp = new Details(nums[i], i, i, 1);
                detailvalues.put(nums[i], temp);
            }
        }
        //System.out.println(maxCount);
        int minDistance = Integer.MAX_VALUE;
        for(Map.Entry<Integer, Details> element : detailvalues.entrySet()){
            if(element.getValue().count == maxCount){
                minDistance = Math.min(minDistance,(element.getValue().maxIndex-element.getValue().minIndex)+1);
            }
            // System.out.println("value->"+element.getValue().value +" min->"+element.getValue().minIndex+ " max->"+ element.getValue().maxIndex +" count->" + element.getValue().count);
        }
        return minDistance;
    }
}
