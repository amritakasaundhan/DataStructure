Approach: Using Recursion
Keep on comparing left value with right value in recursion and return the result
Pass root.left and root.right in helper method and pass 4 base conditions:
1. return true both left and right are null
2. return false of any of the treenodes are null
3. return false if both the Treenodes contains  different value

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null){
            return true;
        }
        return isSymmetricUtil(root.left, root.right);

    }
    public boolean isSymmetricUtil(TreeNode leftTree, TreeNode rightTree) {
       
        if(leftTree == null && rightTree == null){
            return true;
        }
        if(leftTree == null && rightTree != null){
            return false;
        }
        if(leftTree != null && rightTree == null){
            return false;
        }
        if(leftTree.val != rightTree.val){
            return false;
        }
        boolean leftT = isSymmetricUtil(leftTree.left,rightTree.right);
        boolean rightT = isSymmetricUtil(leftTree.right,rightTree.left);
        return (leftT && rightT);
    }
}
