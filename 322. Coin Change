

Approach1: Using recurssion-> pass amount-nums[i] until it reaches to another value in the array. store the minimum of the level
Approach2: Using Dynamic Programming: Use an array of size amount+1, for every amount, check at every indexcount exists using minimum of (curramount-currcoin being used)+1
and count of current index.
    public int coinChange(int[] coins, int amount) {
        if(coins.length == 0 || amount == 0){
            return 0;
        }
        int[] count = new int[amount+1];
        count[0] = 0;
        for(int i = 1; i <= amount; i++){
            count[i] = Integer.MAX_VALUE-1;
        }
        //System.out.println(Integer.MAX_VALUE-1);
       for(int i = 0; i < coins.length ; i++){
           for(int j = 1; j <= amount; j++){
               if(j >= coins[i]){
                   if(1+count[j-coins[i]] < count[j]){
                     count[j] = 1+count[j-coins[i]];
                   }
                 //count[j] = Math.min(count[j], 1+count[j-coins[i]]);
               }
               
           }
       }
        return count[amount] == Integer.MAX_VALUE-1 ? -1 : count[amount];
        }
class Solution {
    int minlevel = Integer.MAX_VALUE;
    public int coinChange(int[] coins, int amount) {
        if(coins.length == 0 || amount == 0){
            return 0;
        }
        //Arrays.sort(coins);
        Set<Integer>set = new HashSet<>();
        for(int num : coins){
            set.add(num);
        }
        int level = 0;
        recussion(coins, set, level, coins.length-1, amount);
        return minlevel == Integer.MAX_VALUE ? -1 : minlevel;
    }
    public int recussion(int [] coins, Set<Integer> set, int level, int index , int amount){
        if(amount < 0){
            return -1;
        }
        if(set.contains(amount)){
            level = level+1;
            minlevel = Math.min(level, minlevel);
            return 0;
        }
        for(int i = index; i >= 0; i--){
            int result = recussion(coins, set, level+1, i, amount-coins[i]);
            if(result == 0){
                return level;
            }
        }
        return -1;
    }

}
