
// public int findDuplicate(int[] nums) {
//         if( nums == null || nums.length == 0){
//             return 0;
//         } 
//         int n = nums.length ; 
//         Map<Integer, Integer> map = new HashMap <>();
//         for(int i = 0 ; i < n ; i++){
//             if(nums[i] >= n){
//                // System.out.println("nums[i] >= n");
//                 return -1;
//             }
//             int count = map.getOrDefault(nums[i], 0);
//             count = count+1;
//             if(count>1){
//                 System.out.println(count);
//                 return nums[i];
//             }
//             map.put(nums[i], count);
//         }
//         return -1;
//     }
class Solution {
    public int findDuplicate(int[] nums) {
        if(nums == null  || nums.length == 0){
            return 0;
        }
        int num1 = nums[0];
        int num2 = nums[0];
        do{
            num1 = nums[num1];
            num2 = nums[nums[num2]];
        }while(num1 != num2);
        
        int ptr1 = nums[0];
        int ptr2 = num1;
        while(ptr1 != ptr2){
            ptr1 = nums[ptr1];
            ptr2 = nums[ptr2];
        }
        return ptr1;
    }
}

// public int findDuplicate(int[] nums) {
//         if(nums == null  || nums.length == 0){
//             return 0;
//         }
//         Arrays.sort(nums);
//         int temp = nums[0];
//         for(int i = 1; i < nums.length; i++){
//             if(nums[i] > nums.length){
//                 return -1;
//             }
//             if(nums[i] == temp){
//                 return nums[i];
//             }
//             temp = nums[i];
//         }
//         return -1;
//     }
