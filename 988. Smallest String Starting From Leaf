Approach: Have a map storing the string corresponding to the int value.. like 0->a, 1->b, 2->c and so on.
do post order traversal and bottom approach and return the string so far. return the smaller string. In case anychild is empty return non empty child.
class Solution {
    int minSum = Integer.MAX_VALUE;
    String minString = "";
    public String smallestFromLeaf(TreeNode root) {
        if(root == null){
            return "";
        }
        String str = "abcdefghijklmnopqrstuvwxyz";
        Map<Integer, String> map = new HashMap<>();
        for(int i = 0 ; i < 26; i++){
            char ch = str.charAt(i);
            map.put(i, String.valueOf(ch));
        }
        return dfs(root, map);
        
    }
    public String dfs(TreeNode root, Map<Integer, String> map){
        if(root == null){
            return "";
        }
        String leftString = dfs(root.left, map);
        String rightString = dfs(root.right, map);
      
        if(leftString == "" && rightString == ""){
           return map.get(root.val);
        }else if(leftString == ""){
            return rightString+map.get(root.val);
        }else if(rightString == ""){
            return leftString+map.get(root.val);
        }else if(Character.valueOf(leftString.charAt(0)).compareTo(Character.valueOf(rightString.charAt(0))) > 0) { 
            return rightString+map.get(root.val);
        }else if(Character.valueOf(leftString.charAt(0)).compareTo(Character.valueOf(rightString.charAt(0))) < 0){
            return leftString+map.get(root.val);
        }else{
            String leftSubString = leftString.substring(1, leftString.length());
            String rightSubString = rightString.substring(1, rightString.length());
            if(leftSubString.length() == 0 && rightSubString.length() == 0){
                return leftString+map.get(root.val); 
            }else if (leftSubString.length() == 0){
                return rightString+map.get(root.val); 
            }else if(rightSubString.length() == 0){
                return leftString+map.get(root.val); 
            }else{
                if(leftSubString.compareTo(rightSubString) > 0){
                    return rightString+map.get(root.val);
                }else{
                    return leftString+map.get(root.val);
                }
            }
               
        }
    }
}
