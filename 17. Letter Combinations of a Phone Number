Approach: Using Backtracking. Store the Character list along with corresponding digit in map. Use backtracking. as soon as current string length reaches to digit length
add the string into result. 
delete the last character of string after one level backtracking.

class Solution {
    public List<String> letterCombinations(String digits) {
        if(digits.length() == 0){
            return new ArrayList<>();
        }
        Map<Integer, List<Character>> map = new HashMap<>();
        map.put(2, new ArrayList<>());
        map.get(2).add('a');
        map.get(2).add('b');
        map.get(2).add('c');
        map.put(3, new ArrayList<>());
        map.get(3).add('d');
        map.get(3).add('e');
        map.get(3).add('f');
        map.put(4, new ArrayList<>());
        map.get(4).add('g');
        map.get(4).add('h');
        map.get(4).add('i');
        map.put(5, new ArrayList<>());
        map.get(5).add('j');
        map.get(5).add('k');
        map.get(5).add('l');
        map.put(6, new ArrayList<>());
        map.get(6).add('m');
        map.get(6).add('n');
        map.get(6).add('o');
        map.put(7, new ArrayList<>());
        map.get(7).add('p');
        map.get(7).add('q');
        map.get(7).add('r');
        map.get(7).add('s');
        map.put(8, new ArrayList<>());
        map.get(8).add('t');
        map.get(8).add('u');
        map.get(8).add('v');
        map.put(9, new ArrayList<>());
        map.get(9).add('w');
        map.get(9).add('x');
        map.get(9).add('y');
        map.get(9).add('z');
        List<String> result = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        backtracking(map, result, 0,digits, sb);
        return result;
    }
    public void backtracking(Map<Integer, List<Character>>map, List<String>result, int index, String digits, StringBuilder sb){
        if(sb.length() == digits.length()){
            result.add(sb.toString());
            //
            return;
        }
           int val = Character.getNumericValue(digits.charAt(index));
           int size = map.get(val).size();
           for(int j = 0; j < size; j++){
               backtracking(map, result,index+1, digits, sb.append(map.get(val).get(j)));
               sb.deleteCharAt(sb.length()-1);
           }
    }
}
