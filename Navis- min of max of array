import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'segment' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER x
     *  2. INTEGER_ARRAY arr
     */

    public static int segment(int x, List<Integer> arr) {
    if(arr.size() == 0 || arr == null){
        return 0;
    }
    // int max_of_mins = Integer.MIN_VALUE;
    // for(int i = 0; i <= arr.size()-x; i++){
    //     int min = arr.get(i);
    //     for(int j = 1; j < x; j++){
    //         if(arr.get(i+j)< min){
    //             min = arr.get(i+j);
    //         }
    //     }
    //     if(min > max_of_mins){
    //     max_of_mins = min;
    int n = arr.size();
    if(n * x == 0){
        return 0;
    }
    int [] left = new int [n];
    left[0] = arr.get(0);
    int [] right = new int [n];
    right[n-1] = arr.get(n-1);
    for(int i = 1; i < n ;i++){
        if(i % x == 0){
            left[i] = arr.get(i);
        }else{
            left[i] = Math.min(left[i-1], arr.get(i));
        }
        int j = n -i -1;
        if((j+1)% x == 0){
            right[j] = arr.get(j);
        }else{
            right[j] = Math.min(right[j+1], arr.get(j));
        }

    }
    int [] mins = new int[n-x+1];
    for(int i = 0; i < n-x+1; i++){
        mins[i] = Math.min(left[i+x-1], right[i]);
    }
    int max = Integer.MIN_VALUE ; 
    for(int i = 0; i < mins.length; i++){
        if(max < mins[i]){
            max = mins[i];
        }
    }
    return max;
    }

}

public class Solution {
