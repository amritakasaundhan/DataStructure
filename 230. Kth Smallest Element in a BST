Approach: traverse in treeusing dfs and keep on storing node value in dfs
after the traversal, keep on iterating loop until k times. return kth element 
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        PriorityQueue<Integer> heap = new PriorityQueue<>();
        dfs(root, heap);
        int count = 0;
        while(!heap.isEmpty() && count != k){
            count++;
            if(count == k){
                return heap.poll();
            }
            heap.poll();
        }
        return -1;
        
    }
    public void dfs(TreeNode root, PriorityQueue<Integer>heap){
        if(root == null){
            return;
        }
        heap.add(root.val);
        dfs(root.left, heap);
        dfs(root.right, heap);
    }
}
