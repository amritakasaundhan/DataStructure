Approach2: Using two array. one to store the product of all left elements and second to store all the element of right of that element. 
At the end return multiplication of both of the arrays

Approach1: Using one array. one to store the product of all left elements and a vaiable having muplication of element of array until the index. 
in array store multiplication of all the left elements. 
intialise variable at one and store multiplication variable and last eelement of array in last index
update variable with multiplying the element last index to the element
intial array->[8, 10, 2]
new array(result)-> [1, 8, 80]
var = 1
for loop from last to start.
in first iteration result array would look like this
[1, 8,80]
var = 1(privious value of var) * last element of array(2) = 2
second iteration
[1, 2*8,80] -> [1, 16, 80]
var = 1(privious value of var) * last element of array(10) = 20
third iteration
[20*1, 16,80] -> [20, 16, 80]

resturn array
Appraoch1:
class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums.length == 0){
            return new int[0];
        }
        int[] result = new int[nums.length];
        result[0] = 1;
        for(int i = 1; i < nums.length; i++){
            result[i] = result[i-1] * nums[i-1];
        }
        int product = 1;
        for(int i = nums.length-1; i >= 0; i--){
            result[i] = product*result[i];
            product *= nums[i];
        }
        
        return result;
    }
}
Approach2:
class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums.length == 0){
            return new int[0];
        }
        int[] left = new int[nums.length];
        int[] right = new int[nums.length];
        int[] result = new int[nums.length];
        left[0] = 1;
        for(int i = 1; i < nums.length; i++){
            left[i] = left[i-1] * nums[i-1];
        }
        right[nums.length-1] = 1;
        for(int i = nums.length-2; i >= 0; i--){
            right[i] = right[i+1] * nums[i+1];
        }
        for(int i = 0; i < nums.length; i++){
            result[i] = left[i] * right[i];
        }
        return result;
    }
}

class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums.length == 0){
            return new int[0];
        }
        int product = 1;
        int zero = 0;
        for(int num : nums){
            if(num != 0){
              product *= num;  
            } else{
                zero++;
            }
        }
        int [] product_Array = new int [nums.length];
        for(int i = 0; i < nums.length ; i++){
            if(zero <= 0){
              product_Array[i] = product / nums[i];  
            }else if(zero > 1){
                product_Array[i] = 0;
                continue;
            } else if(zero == 1){
                if(nums[i] == 0){
                    product_Array[i] = product;
                }else{
                   product_Array[i] = 0; 
                }
            }
            
        }
        return product_Array;
    }
}
