class Solution {
    public boolean checkValidString(String s) {
       int low = 0; int high = 0;
        for(char ch : s.toCharArray()){
            low += ch == '(' ? 1 : -1;
            high += ch != ')' ? 1 : -1;
            if(high < 0){
                break;
            }
            low = Math.max(low, 0);
        }
        return low== 0;
    }
}

class Solution {
    public boolean checkValidString(String s) {
        
        Deque<Integer> paraStack = new LinkedList<>();
        Deque<Integer> starStack = new LinkedList<>();
        
        for(int i = 0 ; i< s.length(); i++){
            char ch = s.charAt(i);
            
            if(ch == '(')
                paraStack.push(i);
            else if(ch == '*')
                starStack.push(i);
            else{
                if(!paraStack.isEmpty())
                    paraStack.pop();
                else if(!starStack.isEmpty())
                    starStack.pop();
                else
                    return false;
            }        
        }
        
        return isBalancedStack(paraStack,starStack);
    }
    private boolean isBalancedStack(Deque<Integer> paraStack, Deque<Integer> starStack){
        
        while(!paraStack.isEmpty()&& !starStack.isEmpty()){
            if(paraStack.pop() > starStack.pop())
                return false;
        }
        return paraStack.isEmpty();
        
    }
    
}
