class Solution {
    public int[] twoSum(int[] numbers, int target) {
        if(numbers.length == 0 || numbers== null){
            return new int [0];
        }
        Map<Integer, Integer> map = new HashMap<>();
        int [] arr = new int [2];
        int start = 0; 
        int end = numbers.length-1;
        while(start <= end){
            if(!map.containsKey(target - numbers[start])){
               map.put(numbers[start], start);
               // map.put(target - numbers[start], start); 
            }else{
                arr[0] = Math.min(map.get(target - numbers[start])+1,start+1) ;
                arr[1] = Math.max(map.get(target - numbers[start])+1,start+1);
                break;
            }
            if(!map.containsKey(target - numbers[end])){
               map.put(numbers[end], end); 
               // map.put(target - numbers[end], end);
            }else{
                
                arr[0] = Math.min(map.get(target - numbers[end])+1, end+1);
                arr[1] = Math.max(map.get(target - numbers[end])+1, end+1);
                break;
            }
            start++;
            end--;
        }
        return arr;
        
        // for(int i = 0; i < numbers.length; i++){
        //     if(!map.containsKey(target - numbers[i])){
        //         map.put(numbers[i], i);
        //     } else{
        //         arr[0] = map.get(target - numbers[i])+1;
        //         arr[1] = i+1;
        //     }
        // }
        // return arr;
    }
}
