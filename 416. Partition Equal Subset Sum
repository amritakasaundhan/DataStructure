class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int num : nums){
            sum += num;
        }
        if(sum %2 != 0){
            return false;
        }
        sum = sum/2;
        boolean [][] array2D = new boolean [nums.length+1][sum+1];
        for(int i = 0 ; i <= nums.length ; i++){
            array2D[i][0] = true;
        }
        for(int i = 1; i <= nums.length ; i++){
            for(int j = 1; j <= sum ; j++){
                if (j - nums[i-1] >= 0) {
                    array2D[i][j] = array2D[i-1][j] || array2D[i-1][j-nums[i-1]];
                } else {
                    array2D[i][j] = array2D[i-1][j];
                }
            }
        }
        // for(int i = 0; i <= nums.length ; i++){
        //     for(int j = 0; j <= sum ; j++){
        //         System.out.println(array2D[i][j]);
        //     }
        // }
        return array2D[nums.length][sum];
        
    }
    
}

// public boolean canPartition(int[] nums) {
//         int sum = 0;
//         for(int num : nums){
//             sum += num ;
//         }
//         if(sum % 2 != 0){
//             return false;
//         }
//         return partition(nums, 0, sum/2);
//     }
//     public boolean partition(int [] nums, int index, int sum){
//         if(sum == 0){
//             return true;
//         }
//         if(index >= nums.length){
//             return false;
//         }
//         if(nums[index] <= sum){
//         boolean isequeal = partition(nums, index+1,sum-nums[index]);  
//             if(isequeal){
//                 return true;
//             }
//         }
//         boolean isequeal = partition(nums, index+1, sum); 
//         return isequeal;
     
//     }
