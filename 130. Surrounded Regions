Approach: First iterate on boards to check if any of inner indices having 'O' is connected to border. 
If it does then, we dont have to update those indices. 
Using fill function, mark visited true to cover all of internal internal indices and then call dfs to find surrounded regions.



class Solution {
    public void solve(char[][] board) {
        if(board.length == 0 || board[0].length == 0){
            return;
        }
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == 'O'){
                   if(i == 0 || j == 0 || i == board.length-1 || j == board[0].length-1){
                       fill(board, i, j, visited); 
                    }  
                }
                    
            }
        }
        
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(i > 0 && j > 0 && i < board.length-1 && j < board[0].length-1 && board[i][j] == 'O' && visited[i][j] != true){;
                    dfs(board, i, j, visited);
                }
            }
        }
        
    }
    public void dfs(char[][] board,int i , int j, boolean[][] visited){
        if(i < 0 || j < 0 || i > board.length-1 || j > board[0].length-1 || visited[i][j] == true || board[i][j] == 'X'){
            return;
        }
        visited[i][j] = true;
        board[i][j] = 'X';
        dfs(board, i+1, j, visited);
        dfs(board, i-1, j, visited);
        dfs(board, i, j+1, visited);
        dfs(board, i, j-1, visited);
        
    }
    public void fill(char[][] board,int i , int j, boolean[][] visited){
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length || visited[i][j] == true || board[i][j] == 'X'){
            return;
        }
        visited[i][j] = true;
        fill(board, i+1, j, visited);
        fill(board, i-1, j, visited);
        fill(board, i, j+1, visited);
        fill(board, i, j-1, visited);
        
    }
}
