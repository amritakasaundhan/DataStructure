Approach: Using three pointers
1. move the curr pointer to kth node from start
2. intialise a prev pointer to null to track the prev node of kthnode
3. intialise kthnode pointer to head
4. iterate until curr is not equal to null and increment prev pointer to kthnode, kthnode to kthnode next and curr to curr next
5. after this check if the prev is equal to null (in case head is the kth node from last)
6. return kthnode.next(as kthnode would be at head in this condition)
7. move prev.next to kthnode.next and return head;
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null){
            return head;
        }
        ListNode curr = head;
        while(curr!= null && n > 0){
            curr = curr.next;
            k++;
        }

        ListNode prev = null;
        ListNode kthNode = head; 
        while(curr != null){
            prev = kthNode;
            curr = curr.next;
            kthNode = kthNode.next;
        }
        if(prev == null){
            head = head.next; //update head; head is the kth node of linkedlist
        }else{
            prev.next = kthNode.next;
        }
        
        return head;
    }
    
}
