class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> result = new ArrayList<>();
        for(int i = 0 ; i < nums.length ; i++){
            int abs = Math.abs(nums[i])-1;
            if(nums[abs] < 0){
                result.add(Math.abs(nums[i]));
            }else{
                nums[abs] = -1* nums[abs];
            }
        }
        return result;
    }
}


//Method 1

//  public List<Integer> findDuplicates(int[] nums) {
//         Map<Integer, Integer> map = new HashMap<>();
//         List<Integer> result = new ArrayList<>();
//         for(int num : nums){
//             int count = map.getOrDefault(num, 0);
//             map.put(num, count+1);
//             if(count+1 > 1){
//                result.add(num); 
//             }
//         }
        
        
//         return result;
//     }

//Method 2

//     public List<Integer> findDuplicates(int[] nums) {
//         if(nums.length == 0){
//            return new ArrayList<>(); 
//         }
//         List<Integer> result = new ArrayList<>();
//         if(nums.length == 1){
//             return new ArrayList<>(); 
//         }
//         Arrays.sort(nums);
//         int first = nums[0];
//         boolean pair = false;
//         for(int i = 1; i < nums.length; i++){
//             int second = nums[i];
//             if(first == second && pair == false){
//                 result.add(first);
//                 pair = !pair;
//             }else if(first == second && pair != false) {
//                 result.remove(result.size()-1);
//                 pair = !pair;
//             }else{
//                 pair = false;
//             }
//             first = second;
            
//         }
//         return result;
//     }
