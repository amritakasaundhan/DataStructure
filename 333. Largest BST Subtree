Approach:
at every level store a boolean if bst, min node value, max node value and no of nodes having bst.
create a class having all these fields. 
at lowest level return object intializes at true, 0, min value, max value. 
update max value with minimum of left child, right child and root value.
update min value with min of left, right and root value
if at node its its bst, update node value with left child node values and right child node value plus 1(to include root)
else update it with max of left child no of nodes, right child numbe rof nodes 
[2, 1, 3]
1.left = true, 0, min, max
1.right = true, 0, min, max
2.left = 1 = true, 0+0+1, Max(min, min, 1) = 1, min(mmax, max, 1)= 1
3.left = true, 0, min, max
3.right = true, 0, min, max
2.right = 3 = true, 0+0+1, Max(min, min, 3) = 3, min(mmax, max, 3)= 3


2.left = 1 = true, 0+0+1, Max(min, min, 1) = 1, min(mmax, max, 1)= 1
2.right = 3 = true, 0+0+1, Max(min, min, 3) = 3, min(mmax, max, 3)= 3
2 = true, 1(2.left)+1(coming from 2.right)+1 = 3, min(1, 2, 3) = 1, max(1, 2, 3) = 3

return 1(2.left)+1(coming from 2.right)+1 = 3


class Solution {
    class NodeInformation{
        boolean isBST ;
        int no_of_nodes;
        int min_node_value;
        int max_node_value;
        public NodeInformation(boolean isBST, int no_of_nodes, int min_node_value, int max_node_value){
            this.isBST = isBST;
            this.no_of_nodes = no_of_nodes;
            this.min_node_value = min_node_value;
            this.max_node_value = max_node_value;
        }
    }
    public int largestBSTSubtree(TreeNode root) {
        if(root == null){
            return 0;
        }
        return largestBSTSubtree_util(root).no_of_nodes;
        
    }
    public NodeInformation largestBSTSubtree_util(TreeNode root){
        if(root == null){
            return new NodeInformation(true, 0, Integer.MIN_VALUE, Integer.MAX_VALUE);
        }
        NodeInformation l = largestBSTSubtree_util(root.left);
        NodeInformation r = largestBSTSubtree_util(root.right);
        boolean BST = false;
        if(l.isBST && r.isBST){
            if (root.val > l.min_node_value && root.val < r.max_node_value){
               BST = true; 
            }
        }
        int max_node = Math.min(l.max_node_value,Math.min(r.max_node_value, root.val));
        int min_node = Math.max(l.min_node_value,Math.max(r.min_node_value, root.val));
        
        int nodes = 0;
        if(BST){
            nodes = l.no_of_nodes + r.no_of_nodes+1;
        }else {

            nodes = Math.max(l.no_of_nodes, r.no_of_nodes);
        }
        return new NodeInformation(BST,nodes,min_node, max_node );
    }
}
