Approach1:Though I would solve this problem using BFS.
1. I will use queue to store the nodes and one boolean flag right direction which will be reset at every level.
and a linke list to store integer values. reason of using linkedlist instead of array list is that because it allows elements to be 
inserted at any place. We will need to add element at begining if case of right direction.
2. I will use null root as check point for levels
3. first add root and null to the queue
4. traverse in tree until queue is not empty
5. poll the Treenode and add left and right nodes is they are not null
6. also add the node value at first if right is true else add at last
7. if the root is null, this means all the nodes at that level is traversed, add list to the result list
8. reset the list and reset the direction

Approach2:
using bfs having one queue to store treenode, one queue to track level and one variable to track the direction.
if left is true store the list original order in reuslt list else store in reverese order 

Approach1:
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null){
            return new ArrayList<>();
        }
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if(root != null){
           queue.offer(root);
           queue.offer(null);
        }
        boolean rightDirection = false;
        LinkedList<Integer> list = new LinkedList<>();
        while(!queue.isEmpty()){
            TreeNode temp = queue.poll();
            if(temp != null){
                if(temp.left != null){
                    queue.offer(temp.left) ;
                }
                if(temp.right != null){
                    queue.offer(temp.right) ;
                } 
                if(rightDirection){
                    list.addFirst(temp.val);
                }else{
                    list.addLast(temp.val);
                }
            }else{
                rightDirection = !rightDirection;
                result.add(list);
                list = new LinkedList<>();
                if(!queue.isEmpty()){
                    queue.offer(null);
                }
                
            }
            
        }
            
            
        return result;
    }
}
Apparoach2:

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null){
            return new ArrayList<>();
        }
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> level = new LinkedList<>();
        queue.offer(root);
        level.offer(0);
        boolean left = false;
        List<List<Integer>> result = new ArrayList<>();
        while(! queue.isEmpty()){
            List<Integer> list = new ArrayList<>();
            int l = level.peek();
            while(!level.isEmpty() && level.peek() == l){
                TreeNode temp = queue.poll();
                int templ = level.poll();
                    list.add(temp.val);
                   if(temp.left != null){
                        queue.add(temp.left);
                        level.add(templ+1);
                    } 
                    if(temp.right != null){
                        queue.add(temp.right);
                        level.add(templ+1);
                    }
            }
            if(!left){
                result.add(list);
            }else{
                Collections.reverse(list);
                result.add(list);
            }
            left = !left;
        }
        return result;
    }
}
