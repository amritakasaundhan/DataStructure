Approach1: Using Set. 
1. Store the all the elements of array in set
2. Create an another for loop starting from 0 to arr length
3. check is set does contains i, return i

Space O(n)
Time: o(n)
Approach2: using XOR time o(n) and space o(1)
XOR has property to produce own inverse to find the missing element in linear time.
Array[0 1 3]
4∧(0∧0)∧(1∧1)∧(2∧3)∧(3∧4)
1. Intialise missign element at nums.length
2. iterate in a for  loop and keep doing XOR in missingelement and i and nums[i]
3. at the end return missing element



class Solution {
    public int missingNumber(int[] nums) {
        int missing_number = nums.length;
        for(int i = 0; i < nums.length; i++){
            missing_number ^= i ^ nums[i];
        }
        return missing_number;
    }
}
Set<Integer>set = new HashSet<>();
        for(int i = 0 ; i < nums.length ; i++){
            set.add(nums[i]);
        }
        for(int i = 0 ; i <=nums.length; i++ ){
            if(!set.contains(i)){
                return i;
            }
        }
        return -1;
// public int missingNumber(int[] nums) {
//         Map<Integer, Integer> map = new HashMap<>();
//         //map.put(0, nums[0])
//         for(int i = 0; i <= nums.length; i++){
//             try{
//               map.put(nums[i], i); 
//             }catch(ArrayIndexOutOfBoundsException e){
//                 continue;
//             }
            
//         }
//         for(int i = 0 ; i <= nums.length; i++){
//             if(!map.containsKey(i)){
//                 return i;
//             }
//         }
//         return -1;
//     }
