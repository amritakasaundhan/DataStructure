Approach1: Using Recursion
1. there would be two base condition a. if l1 == null return l2 and if l2 == null return l1
2. Keep on doing recursion in l1 and l2 by comparing l1.val against l2.val

Approch2: iteration
in loop keep on checking the l1 value against l2 val and keep on linking the lesser the and increment the corresponding ListNode

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null && l2 == null){
            return null;
        }
        if(l1 == null ){
            return l2;
        }
        if(l2 == null ){
            return l1;
        }
        ListNode curr = null;
        if(l1.val <= l2.val){
            curr = l1;
            l1 = l1.next;
        }else{
            curr = l2;
            l2 = l2.next;
        }
        ListNode head  = curr;
        while(l1 != null && l2 != null){
            if(l1.val <= l2.val){
                curr.next = l1;
                curr = curr.next; 
                l1 = l1.next;
            }else{
                curr.next = l2;
                curr = curr.next;
                l2 = l2.next;
            }
        }
        if(l1 != null){
            curr.next = l1;
        }
        if(l2 != null){
            curr.next = l2;

        }
        return head;
    }
}

public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
if(l1== null){
return l2;
}else if(l2 == null){
return l1;
}else if(l1.val <= l2.val){
l1.next = mergeTwoLists(l1.next, l2);
return l1;
}else{
l2.next = mergeTwoLists(l1, l2.next);
return l2;
}
}
