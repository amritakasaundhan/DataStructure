class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        if(root == null){
            return new ArrayList<>();
        }
        List<List<Integer>> resultList = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        Queue<TreeNode> nodes = new LinkedList<>();
        Queue<Integer> levels = new LinkedList<>();
        int depth = 1;
        nodes.add(root);
        levels.add(1);
        while(!nodes.isEmpty()){
            TreeNode temp = nodes.poll();
            int level = levels.poll();
            if(depth != level){
                resultList.add(new ArrayList(list));
                depth = level;
                list.clear();
            }
            list.add(temp.val);
            if(temp.left != null){
               nodes.add(temp.left);
               levels.add(level+1); 
            }
            if(temp.right != null){
                nodes.add(temp.right);
                levels.add(level+1);  
            }
            
            
        }
        resultList.add(list);
        Collections.reverse(resultList);
        return resultList;
    }
}
