/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node == null){
            return node;
        }
        if(node.neighbors.size() == 0){
            return new Node(1);
        }
        Map<Node, Node> map = new HashMap<>();
        Queue<Node> q = new LinkedList<>();
        q.add(node);
        map.put(node, new Node(node.val, new ArrayList()));
        while(!q.isEmpty()){
            Node temp = q.poll();
            for(Node curr: temp.neighbors){
                if(!map.containsKey(curr)){
                    map.put(curr, new Node(curr.val, new ArrayList()));
                    q.add(curr);
                }
            map.get(temp).neighbors.add(map.get(curr));
                
            }  
        }
        return map.get(node);
    }
}
