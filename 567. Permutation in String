Approach: Using two pointers and two maps.(two pointers to avoid case like str1 = adc str2 = dcda another exaple atr1 = hello, str2= llooohhhhooooeeeeee)
in first map store all the characters and corrsponding counts in first string.
second map is to restore the map as soon as it encounters chacters that does not exists in string1.
if chacter at j does not exist in map increment i and reset map2 with original charcters count
else increment j and decrement the count of character. if count is 0 delete the character from map. at anytime encounter map size is zero, means s2 has atleast one
permutation in s2. hence return true.


class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length() == 0 || s2.length() == 0){
            return false;
        }
        Map<Character, Integer> set1 = new HashMap<>();
        for(int i = 0; i < s1.length(); i++){
            int count = set1.getOrDefault(s1.charAt(i), 0);
            set1.put(s1.charAt(i), count+1);
        }
        Map<Character, Integer> set2 = new HashMap<>();
        set2.putAll(set1);
        int i = 0; 
        int j = 0;
        while(i < s2.length() && j < s2.length()){
            char ch = s2.charAt(j);
            if(set2.containsKey(ch)){
               int count = set2.getOrDefault(ch, 0);
                if(count <= 1){
                    set2.remove(ch);
                }else{
                    set2.put(ch, count-1);
                }
                if(set2.size() == 0){
                    return true;
                }
                j++;
            }else{
                set2.putAll(set1);
                i++;
                j = i;
            }
        } 
             
        return false;
    }
}
