Approach: Using DFS: 
at every node check if node value is either euqals to p.value or q.value:
    if it does then return node
    else:
    go inside recursion for left and right branch. 
 At the end, check if the left and childs are not null, return root
 if left child is not null, return left child else return right child

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null){
            return root;
        }
        return dfs(root, p, q);
    }
    public TreeNode dfs(TreeNode node,TreeNode p,TreeNode q){
        if(node == null){
            return null;
        }
        if(node.val == p.val || node.val == q.val){
            return node;
        }
        TreeNode left_childs = dfs(node.left, p, q);
        TreeNode right_childs = dfs(node.right, p, q);
        if(left_childs != null && right_childs != null){
            return node;
        }else if(left_childs!= null){
            return left_childs;
        }else{
            return right_childs;
        }
        
    }
}
