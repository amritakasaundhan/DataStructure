Approach: 
using two pointers: 
1. one is prev pointer which is pointer to newHead, newhead.next will be equal to head and second is curr pointer assigned to head
2. traverse in list until the curr!= null
3. create a loop within traversal until curr.val == curr.next.val and move curr to curr.next
4. after this point, assign prev.next to curr.next. Also check if prev.next == curr, if yes then prev = curr;
5. return prev.next

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode newHead = new ListNode(0);
        newHead.next = head;
        ListNode prev = newHead;
        ListNode curr = head;
        while(curr != null){
            while(curr.next != null && curr.val == curr.next.val){
                curr = curr.next;
            }
            if(prev.next == curr){
                prev = curr;
            }else{
                prev.next = curr.next;
            }
            curr = curr.next;
        }
        return newHead.next;
    }
}
