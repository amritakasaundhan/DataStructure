Approach: Using brute force solution. For every word in word array check if the word exist in board. If it does, add in result.
Time complexisty O(m*n*l(size of word array))

class Solution {
    List<String> result = new ArrayList<>();
    public List<String> findWords(char[][] board, String[] words) {
        if(board.length == 0 || board[0].length == 0){
            return new ArrayList<>();
        }

        for(int i = 0 ; i < words.length; i++){
            wordSearch(board, words[i]);
            //System.out.println("word->"+words[i]+" result->"+ result);
        }
        return result;
    }
    public void wordSearch(char[][] board, String word){
        boolean [][] visited = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == word.charAt(0)){
                    boolean found = dfs(board, word, i, j,visited, 0);
                    if(found){
                        return;
                    }
                }
            }
        }
    }
    public boolean dfs(char[][] board,String word, int i, int j , boolean[][] visited, int index){
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length || visited[i][j] == true || board[i][j] != word.charAt(index)){
            return false;
        }
        if(word.length()-1 == index && word.charAt(index) == board[i][j]){
            //System.out.println("dfs->"+ "word->"+word +" list->"+ result);
            result.add(word);
            //System.out.println("after dfs->"+ "word->"+word +" list->"+ result);
            return true;
        }else if(word.length()-1 == index && word.charAt(index) != board[i][j]){
            return false;
        }
        visited[i][j] = true;
        boolean result = dfs(board, word,i+1, j, visited, index+1) ;
        if(result){
            return true;
        }
        result = dfs(board,word, i-1, j, visited, index+1);
        if(result){
            return true;
        }
        result = dfs(board, word,i, j+1, visited, index+1);
        if(result){
            return true;
        }
        result = dfs(board, word,i, j-1, visited, index+1);
        if(result){
            return true;
        }
        visited[i][j] = false;
        return false;
        
    }
