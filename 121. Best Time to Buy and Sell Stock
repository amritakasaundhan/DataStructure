approach1: using two loop starting i at 0th index and j at i+1 index, and a variblae max_profit
keep on iterating in loop and updating the max profit by sustracting elements at j to element at i and taking Math.max value
return the max profit
time complexity o(n2)
space o(1)
approach2: using one for loop and min price(intialize at Integer_max.value) and max profit (intialize at 0)variable
in every iteration, check if the min price is greater than element at ith index, update minprice = prices[i]
else if element at ith index - minprice is greater than maxprofit(prices[i]- minprize > maxprofit) update maxprofit=prices[i]- minprize
return max profit
time complexity o(n)
space o(1)
approach 3: using two pointer apporach and one variable max profit, both pointer initialize at 0
create while loop until pointer 2 is less than array length
in every iteration check if element at p1 is greater than element at p2, update pointer p1 = p2 and increment p2 by one
else update the maxprofit by taking Math.max(max profit, prices[p2]- prices[p1]) and increment only p2 by one
at the end return max profit.
time complexity o(n)
space o(1)

approach 3:
    public int maxProfit(int[] prices) {
        if(prices.length == 0){
            return 0;
        }
        int p1 = 0;
        int p2 = 0;
        int max_profit = 0;
        while(p2 < prices.length){
            if(prices[p1] > prices[p2]){
                p1 = p2;
                p2++;
            }else{
                max_profit = Math.max(max_profit,(prices[p2]-prices[p1]) );
                p2++;
            }
        }
        return max_profit;
        
    }
    
    
approach 2:
class Solution {
    public int maxProfit(int[] prices) {
        int max_profit = 0;
        int minprice = Integer.MAX_VALUE;
        for(int i = 0; i < prices.length;i++){
           if(prices[i] < minprice) {
               minprice = prices[i];
           }else if((prices[i] - minprice) > max_profit ){
               max_profit = prices[i] - minprice;
           }
        }
       return max_profit; 
    }
}



// public int maxProfit(int[] prices) {
//         int max_profit = 0;
//         for(int i = 0; i < prices.length;i++){
//             for(int j = i+1; j < prices.length; j ++){
//                 int profit = prices[j] - prices[i];
//                 if(profit > max_profit){
//                     max_profit = profit ;
//                 }
//             }
//         }
//        return max_profit; 
//     }
