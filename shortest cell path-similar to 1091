import java.io.*;
import java.util.*;

    
class Solution {
  
	static int shortestCellPath(int[][] grid, int sr, int sc, int tr, int tc) {
		  if(grid.length == 0 || grid[0].length == 0){
        return -1;
      }
    int [][]directions = new int [][] {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
      Queue<int []> queue = new LinkedList<>();
      boolean [][] visited = new boolean [grid.length][grid[0].length];
      if(grid[sr][sc] == 0){
        return -1;
      }
      int shortest_distance = 0; 
      queue.add(new int []{sr, sc});
      visited[sr][sc] = true;
      while(!queue.isEmpty()){
        int size = queue.size();
        for(int i = 0; i < size; i++){
          int [] curr = queue.poll();
          if(curr[0] == tr && curr[1] == tc){
              return shortest_distance;
          }
        
        for(int [] direction : directions){
          int x = curr[0] + direction[0];
          int y = curr[1] + direction[1];
          if((x >= 0) && (y >= 0) && (x < grid.length) && (y < grid[0].length) && (grid[x][y] == 1)&&(visited[x][y] == false)){
            queue.add(new int [] {x, y});
            visited[x][y] = true;
          }
        }
          
       }
        shortest_distance++;
      }
    return -1;
    }
	
  
  //return shortest distance
public static void main(String[] args) {
  int [][] grid = {{1, 1, 1, 1}, {0, 0, 0, 1}, {1, 1, 1, 1}};
	int dis = shortestCellPath(grid, 0, 0, 2, 0);
	}
}
