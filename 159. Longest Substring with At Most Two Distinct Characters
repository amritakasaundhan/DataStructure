Approach: Using sliding window-> using two pointers and map. Map to store the indices. 
update the max_length in every iteration of using max of max length and right-left pointer. 
update the left pointer when the map size is equal to 3. get the key of element of smallest index and remove it from map. update left pointer by index+1;
class Solution {
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        if(s.length() < 3){
            return s.length();
        }
        //int count = 0;
        int p1 = 0;
        int p2 = 0;
        Map<Character, Integer> map = new HashMap<>();
        int max_length = 2;
        while(p2 < s.length()){
            if(map.size() < 3){
               map.put(s.charAt(p2), p2);
                p2++;
            }
            if(map.size() == 3){
               int index = Collections.min(map.values());
                map.remove(s.charAt(index));
                p1 = index+1;
            }
            max_length = Math.max(max_length, p2-p1);
        }
        return max_length;

    }
}
